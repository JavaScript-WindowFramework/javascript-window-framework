declare namespace JWF {
// Generated by dts-bundle v0.7.3





    interface FunctionData {
            name: string;
            params: unknown[];
    }
    export interface AdapterResult {
            value: {
                    [keys: string]: unknown;
            } | null;
            error: string | null;
    }
    /**
        *Ajax通信用アダプタ
        *
        * @export
        * @class Adapter
        */
    export class Adapter {
            /**
                *Creates an instance of Adapter.
                * @param {string} [scriptUrl] 通信先アドレス
                * @param {string} [keyName] セッション情報記憶用キー
                * @memberof Adapter
                */
            constructor(scriptUrl?: string, keyName?: string);
            getKeyName(): string;
            /**
                *サーバに対して命令を単独実行
                *呼び出し内容をまとめない
                * @param {string} funcName ファンクション名(className.functionName)
                * @param {...unknown[]} params パラメータ
                * @returns {Promise<never>}
                * @memberof Adapter
                */
            execAlone(funcName: string, ...params: unknown[]): Promise<never>;
            /**
                *戻り値をバイナリとして受け取る(ファイルダウンロード用)
                *命令は単独実行される
                * @param {string} funcName
                * @param {...unknown[]} params
                * @returns {Promise<never>}
                * @memberof Adapter
                */
            execBinary(funcName: string, ...params: unknown[]): Promise<never>;
            /**
                *複数のファンクションの実行
                *
                * @param {FunctionData[][]} functions
                * @returns {Promise<any>}
                * @memberof Adapter
                */
            exec(functions: FunctionData[][]): Promise<never[]>;
            /**
                *単一ファンクションの実行
                *
                * @param {string} funcName ファンクション名
                * @param {...unknown[]} params パラメータ
                * @returns {Promise<any>}
                * @memberof Adapter
                */
            exec(funcName: string, ...params: unknown[]): Promise<never>;
            /**
                *Jsonデータ送受信とPromise化
                *
                * @static
                * @param {string} url
                * @param {unknown} [data]
                * @param {{ [key: string]: string }} [headers]
                * @param {boolean} [binary]
                * @returns {Promise<unknown>}
                * @memberof Adapter
                */
            static sendJsonAsync(url: string, data?: unknown, headers?: {
                    [key: string]: string;
            }, binary?: boolean): Promise<unknown>;
            /**
                *ファイルのアップロード
                *パラメータはURLに設定される
                *
                * @param {Blob} buffer
                * @param {string} funcName
                * @param {...unknown[]} params
                * @returns
                * @memberof Adapter
                */
            upload(buffer: Blob, funcName: string, ...params: unknown[]): Promise<unknown>;
            /**
                *ファイル送信
                *
                * @static
                * @param {string} url
                * @param {Blob} buffer
                * @param {(result: never) => void} proc
                * @param {({ [key: string]: string | number })} params
                * @returns
                * @memberof Adapter
                */
            static sendFile(url: string, buffer: Blob, proc: (result: never) => void, params: {
                    [key: string]: string | number;
            }): XMLHttpRequest | null;
    }



    export interface BUTTON_EVENT_ITEM_CLICK {
            event: Event;
            button: Button | ImageButton;
    }
    export interface ButtonEventMap extends WINDOW_EVENT_MAP {
            buttonClick: [BUTTON_EVENT_ITEM_CLICK];
            buttonDblClick: [BUTTON_EVENT_ITEM_CLICK];
    }
    /**
        *ボタン用クラス
        *
        * @export
        * @class Button
        * @extends {BaseView}
        */
    export class Button extends BaseView<ButtonEventMap> {
            /**
                *Creates an instance of Button.
                * @param {string} [text] ボタンに設定するテキスト
                * @memberof Button
                */
            constructor(...params: [string] | [string, unknown] | [{
                    label?: string;
                    value?: unknown;
                    event?: () => void;
            }]);
            /**
                *ボタンに対してテキストを設定する
                *
                * @param {string} text
                * @memberof Button
                */
            setText(text: string): void;
            /**
                *ボタンに設定したテキストを取得する
                *
                * @returns {string}
                * @memberof Button
                */
            getText(): string | null;
            setAlign(style: string): void;
            getValue(): unknown;
    }
    export class ImageButton extends BaseView<ButtonEventMap> {
            /**
                *Creates an instance of Button.
                * @param {string} [text] ボタンに設定するテキスト
                * @memberof Button
                */
            constructor(image: string, alt?: string);
            /**
                *ボタンに対してテキストを設定する
                *
                * @param {string} text
                * @memberof Button
                */
            setText(text: string): void;
            /**
                *ボタンに設定したテキストを取得する
                *
                * @returns {string}
                * @memberof Button
                */
            getText(): string;
            setAlign(style: string): void;
    }



    export interface CALENDARVIEW_EVENT_DATE_CLICK {
        date: Date;
    }
    export interface CalendarViewEventMap extends WINDOW_EVENT_MAP {
        date: [CALENDARVIEW_EVENT_DATE_CLICK];
    }
    export class CalendarView extends BaseView<CalendarViewEventMap> {
        constructor(p?: WINDOW_PARAMS);
        moveMonth(month: number): void;
        redraw(): void;
        setHoliday(date: Date, text: string): void;
        setSelect(date: Date, value?: boolean): void;
    }



    export class CheckBox extends BaseView {
        constructor(params?: {
            text?: string;
            checked?: boolean;
        });
        isCheck(): boolean;
        setCheck(check: boolean): void;
        setText(text: string): void;
        getText(): string | null;
        getTextNode(): HTMLSpanElement;
    }



    /**
      *フレームウインドウクラス
      *
      * @export
      * @class FrameWindow
      * @extends {BaseView}
      */
    export class FrameWindow<T extends WINDOW_EVENT_MAP = WINDOW_EVENT_MAP> extends BaseView<T> {
        constructor(param?: WINDOW_PARAMS);
    }



    export class Label extends BaseView {
        constructor(text?: string);
        setFontSize(size: number): void;
        setText(text: string): void;
        getText(): string | null;
        getTextNode(): HTMLSpanElement;
        setAlign(style: string): void;
    }



    export function Sleep(timeout: number): Promise<void>;
    export class TimerProc {
        constructor(proc: () => void, timeout: number);
        call(timeout?: number): void;
    }
    export function sprintf(format: string, ...args: unknown[]): string;



    export interface LISTVIEW_EVENT_ITEM_CLICK {
            itemIndex: number;
            subItemIndex: number;
            event: MouseEvent;
    }
    export interface LISTVIEW_EVENT_DRAG_START {
            itemIndex: number;
            subItemIndex: number;
            event: DragEvent;
    }
    export interface ListViewEventMap extends WINDOW_EVENT_MAP {
            itemClick: [LISTVIEW_EVENT_ITEM_CLICK];
            itemDblClick: [LISTVIEW_EVENT_ITEM_CLICK];
            itemDragStart: [LISTVIEW_EVENT_DRAG_START];
    }
    /**
        *ListView用クラス
        *
        * @export
        * @class ListView
        * @extends {BaseView}
        */
    export class ListView extends BaseView<ListViewEventMap> {
            /**
                *Creates an instance of ListView.
                * @param {*} [params] ウインドウ作成パラメータ
                * @memberof ListView
                */
            constructor(params?: WINDOW_PARAMS);
            /**
                *カラムのサイズを設定
                *
                * @param {number} index
                * @param {number} size
                * @memberof ListView
                */
            setColumnWidth(index: number, size: number): void;
            /**
                *カラムのスタイルを設定
                *
                * @param {number} col カラム番号
                * @param {('left'|'right'|'center')} style スタイル
                * @memberof ListView
                */
            setColumnStyle(col: number, style: "left" | "right" | "center"): void;
            /**
                *カラムのスタイルを複数設定
                *
                * @param {(('left' | 'right' | 'center')[])} styles スタイル
                * @memberof ListView
                */
            setColumnStyles(styles: ("left" | "right" | "center")[]): void;
            /**
                *ヘッダを追加
                *配列にすると複数追加でき、さらに配列を含めるとサイズが指定できる
                * @param {(string|(string|[string,number])[])} labels ラベル | [ラベル,ラベル,・・・] | [[ラベル,幅],[ラベル,幅],・・・]
                * @param {number} [size] 幅
                * @memberof ListView
                */
            addHeader(label: string | (string | [string, number])[], size?: number): void;
            /**
                *アイテムのソートを行う
                *
                * @param {number} [index] カラム番号
                * @param {boolean} [order] 方向 true:昇順 false:降順
                * @memberof ListView
                */
            sortItem(index?: number, order?: boolean): void;
            /**
                *アイテムを選択する
                *すでにある選択は解除される
                * @param {(number | number[])} index レコード番号
                * @memberof ListView
                */
            selectItem(index: number | number[]): void;
            /**
                *アイテムの選択を全て解除する
                *
                * @memberof ListView
                */
            clearSelectItem(): void;
            /**
                *アイテムの選択を追加する
                *
                * @param {(number | number[])} index レコード番号
                * @memberof ListView
                */
            addSelectItem(index: number | number[]): void;
            /**
                *アイテムの選択を解除する
                *
                * @param {(number | number[])} index レコード番号
                * @memberof ListView
                */
            delSelectItem(index: number | number[]): void;
            /**
                *アイテムの数を返す
                *
                * @returns {number} アイテム数
                * @memberof ListView
                */
            getItemCount(): number;
            /**
                *アイテムが選択されているか返す
                *
                * @param {number} index レコード番号
                * @returns {boolean}
                * @memberof ListView
                */
            isSelectItem(index: number): boolean;
            /**
                *アイテムを全て削除する
                *
                * @memberof ListView
                */
            clearItem(): void;
            /**
                *対象セルのノードを取得
                *
                * @param {number} row
                * @param {number} col
                * @returns
                * @memberof ListView
                */
            getCell(row: number, col: number): HTMLElement & {
                    value?: unknown;
            } | null;
            /**
                *アイテムに値を設定する
                *
                * @param {number} index レコード番号
                * @param {*} value 値
                * @memberof ListView
                */
            setItemValue(index: number, value: unknown): void;
            /**
                *アイテムの値を取得する
                *
                * @param {number} index レコード番号
                * @returns 値
                * @memberof ListView
                * @returns {string} アイテムに設定されている値
                */
            getItemValue(index: number): unknown;
            /**
                *全てのアイテムの値を取得する
                *
                * @returns {unknown[]}
                * @memberof ListView
                */
            getItemValues(): unknown[];
            /**
                *アイテムのテキスト内容を取得
                *
                * @param {number} row 行
                * @param {number} col 列
                * @returns {string} アイテムに設定されているテキスト
                * @memberof ListView
                */
            getItemText(row: number, col: number): string | null;
            /**
                *最初に選択されているアイテムを返す
                *
                * @returns {number} 選択されているアイテム番号(見つからなかったら-1)
                * @memberof ListView
                */
            getSelectItem(): number;
            /**
                *選択されている値を全て取得する
                *
                * @returns {unknown[]} 選択されているアイテムの値
                * @memberof ListView
                */
            getSelectValues(): unknown[];
            /**
                *指定行のセルノードを返す
                *
                * @param {number} row
                * @returns
                * @memberof ListView
                */
            getLineCells(row: number): HTMLElement[];
            /**
                *アイテムを追加する
                *アイテムはテキストかノードが指定できる
                *配列を渡した場合は、複数追加となる
                * @param {(string|(string|HTMLElement)[])} value テキストもしくはノード
                * @returns
                * @memberof ListView
                */
            addItem(value: string | number | HTMLElement | ((string | number | HTMLElement)[]), itemValue?: unknown): number;
            /**
                *ソート用のキーを設定する
                *
                * @param {number} row レコード番号
                * @param {number} column カラム番号
                * @param {*} value キー
                * @returns
                * @memberof ListView
                */
            setSortKey(row: number, column: number, value: unknown): boolean;
            /**
                *ソート用のキーをまとめて設定する
                *
                * @param {number} row レコード番号
                * @param {unknown[]} values キー配列
                * @memberof ListView
                */
            setSortKeys(row: number, values: unknown[]): void;
            /**
                *アイテムを書き換える
                *
                * @param {number} row レコード番号
                * @param {number} column カラム番号
                * @param {(string|HTMLElement)} value テキストもしくはノード
                * @returns
                * @memberof ListView
                */
            setItem(row: number, column: number, value: string | number | HTMLElement): boolean;
            /**
                *ヘッダに合わせてカラムサイズを調整する
                *基本的には直接呼び出さない
                * @protected
                * @memberof ListView
                */
            protected resize(): void;
            /**
                *
                *
                * @param {boolean} flag
                * @memberof ListView
                */
            onLayout(flag: boolean): void;
    }



    export interface MessageBoxEventMap extends WINDOW_EVENT_MAP {
        buttonClick: [unknown];
    }
    export class MessageBox extends FrameWindow<MessageBoxEventMap> {
        constructor(title: string, msg: string, buttons?: [string, unknown][]);
        setText(text: string): void;
    }



    /**
      *パネル用クラス
      *
      * @export
      * @class Panel
      * @extends {BaseView}
      */
    export class Panel extends BaseView {
        constructor();
    }



    export class SelectBox extends BaseView {
        constructor(option: {
            name?: string;
            options: {
                label: string;
                value: string | number | boolean;
            }[];
            event?: {
                [key: string]: () => void;
            };
        });
        getValue(): string;
    }



    /**
        *分割ウインドウ用クラス
        *
        * @export
        * @class Splitter
        * @extends {BaseView}
        */
    export var SPLIT_TYPE: "ns" | "sn" | "ew" | "we";
    export class Splitter extends BaseView {
            /**
                *Creates an instance of Splitter.
                * @param {number} [splitPos]
                * @param {('ns'|'sn'|'ew'|'we')} [splitType] 分割領域のタイプ
                * @memberof Splitter
                */
            constructor(splitPos?: number, splitType?: typeof SPLIT_TYPE);
            /**
                *子ウインドウの追加
                *
                * @param {number} index 追加位置
                * @param {BaseView} child 追加ウインドウ
                * @param {('left' | 'right' | 'top' | 'bottom' | 'client' | null)} [arrgement] ドッキングタイプ
                * @memberof Splitter
                */
            addChild(index: number | BaseView, child: BaseView | unknown, arrgement?: "left" | "right" | "top" | "bottom" | "client" | null): void;
            /**
                *子ウインドウを切り離す
                *
                * @param {number} index 削除位置
                * @param {BaseView} [child] 削除ウインドウ
                * @memberof Splitter
                */
            removeChild(index: number | BaseView, child?: BaseView): void;
            /**
                *子ウインドウを全て切り離す
                *
                * @param {number} [index] 削除位置
                * @memberof Splitter
                */
            removeChildAll(index?: number): void;
            /**
                *分割バーの位置設定
                *
                * @param {number} pos
                * @param {('ns'|'sn'|'ew'|'we')} [type]
                * @memberof Splitter
                */
            setSplitterPos(pos: number, type?: "ns" | "sn" | "ew" | "we"): void;
            /**
                *
                *
                * @param {boolean} flag true:有効 false:無効
                * @param {number} [size] スライドを開始するサイズ
                * @memberof Splitter
                */
            setOverlay(flag: boolean, size?: number): void;
            /**
                *子ウインドウの取得
                *
                * @param {number} index 位置
                * @returns {BaseView} 子ウインドウ
                * @memberof Splitter
                */
            getChild(index: number): BaseView;
    }



    export interface ITEM_OPTION {
        label?: string;
        type?: "date" | "string" | "textarea" | "password" | "number" | "checkbox" | "select" | "submit" | "image";
        name?: string;
        value?: string | number | boolean | Date;
        link?: string;
        image?: string;
        image_width?: string;
        styles?: {
            [key: string]: string;
        };
        events?: {
            [key: string]: () => void;
        };
        options?: {
            name: string;
            value: string | number;
        }[];
    }
    export interface TableFormViewMap extends WINDOW_EVENT_MAP {
        itemChange: [FormInputElement];
    }
    export type FormInputElement = (HTMLTextAreaElement | HTMLInputElement | HTMLSelectElement | HTMLImageElement) & {
        value?: string;
        type2?: string;
        value2?: Date | undefined;
    };
    /**
      *入力用ウインドウ
      *
      * @export
      * @class TableFormView
      * @extends {BaseView}
      */
    export class TableFormView extends BaseView<TableFormViewMap> {
        constructor(params?: WINDOW_PARAMS);
        addItem(params: ITEM_OPTION | ITEM_OPTION[]): HTMLElement | null;
        getItem(name: string): HTMLElement | null;
        getParams(): {
            [key: string]: string | number | boolean | undefined;
        };
        setParams(params: {
            [key: string]: string | number | boolean;
        }): void;
    }



    /**
      *テキストボックス
      *
      * @class TextBox
      * @extends {JSW.Window}
      */
    export class TextBox extends BaseView {
        constructor(params?: {
            text?: string;
            label?: string;
            type?: string;
            image?: string;
        });
        setText(text: string): void;
        getText(): string;
        setLabel(text: string): void;
        getLabel(): string;
        getTextNode(): HTMLInputElement;
        focus(): void;
    }



    export interface CustomEvent extends WINDOW_EVENT_MAP {
        updateText: [];
    }
    /**
      *複数行テキスト
      *
      * @export
      * @class TextArea
      * @extends {BaseView}
      */
    export class TextArea extends BaseView<CustomEvent> {
        constructor(params?: WINDOW_PARAMS);
        setText(text: string): void;
        getText(): string;
    }



    export interface TREEVIEW_EVENT_SELECT {
            item: TreeItem;
            user: boolean;
    }
    export interface TREEVIEW_EVENT_DROP {
            item: TreeItem;
            srcValue?: unknown;
            event: DragEvent;
    }
    export interface TREEVIEW_EVENT_DRAG_START {
            item: TreeItem;
            event: DragEvent;
    }
    export interface TREEVIEW_EVENT_OPEN {
            item: TreeItem;
            opened: boolean;
    }
    export interface TreeViewEventMap extends WINDOW_EVENT_MAP {
            itemOver: [{
                    event: MouseEvent;
                    item: TreeItem;
            }];
            itemOpen: [TREEVIEW_EVENT_OPEN];
            itemSelect: [TREEVIEW_EVENT_SELECT];
            itemDblClick: [TREEVIEW_EVENT_SELECT];
            itemDrop: [TREEVIEW_EVENT_DROP];
            itemDragStart: [TREEVIEW_EVENT_DRAG_START];
    }
    /**
        *
        *
        * @export
        * @class TreeItem
        */
    export class TreeItem {
            /**
                *Creates an instance of TreeItem.
                * @param {string} [label]
                * @param {boolean} [opened]
                * @memberof TreeItem
                */
            constructor(label?: string, opened?: boolean);
            isOpened(): boolean;
            /**
                *アイテムのノードを返す
                *
                * @returns {HTMLElement}
                * @memberof TreeItem
                */
            getNode(): HTMLElement;
            /**
                *アイテムのラベル部分のノードを返す
                *
                * @returns {HTMLElement}
                * @memberof TreeItem
                */
            getBody(): HTMLElement;
            /**
                *アイテムに対してキーを関連付ける
                *
                * @param {string} name
                * @param {*} value
                * @memberof TreeItem
                */
            setKey(name: string, value: unknown): void;
            /**
                *アイテムのキーを取得する
                *
                * @param {string} name
                * @returns
                * @memberof TreeItem
                */
            getKey(name: string): unknown;
            /**
                *アイテムを追加する
                *
                * @param {*} [label] ラベル
                * @param {boolean} [opened] オープン状態
                * @returns {TreeItem} 追加したアイテム
                * @memberof TreeItem
                */
            addItem(label?: string | [string, unknown], opened?: boolean): TreeItem;
            /**
                *子アイテムを全てクリア
                *
                * @memberof TreeItem
                */
            clearItem(): void;
            /**
                *自分自身を親から切り離す
                *
                * @memberof TreeItem
                */
            removeItem(): void;
            moveItem(vector: number): boolean;
            /**
                *子アイテムの数を返す
                *
                * @returns {number}
                * @memberof TreeItem
                */
            getChildCount(): number;
            /**
                *アイテムに関連付ける値を設定
                *
                * @param {*} value
                * @memberof TreeItem
                */
            setItemValue(value: unknown): void;
            /**
                *アイテムに関連付けた値を取得
                *
                * @returns {*}
                * @memberof TreeItem
                */
            getItemValue(): unknown;
            /**
                *アイテムのラベルを設定
                *
                * @param {string} value
                * @memberof TreeItem
                */
            setItemText(value: string): void;
            /**
                *アイテムのラベルを取得
                *
                * @returns {string}
                * @memberof TreeItem
                */
            getItemText(): string;
            /**
                *子アイテムを取得
                *
                * @param {number} index
                * @returns {TreeItem}
                * @memberof TreeItem
                */
            getChildItem(index: number): TreeItem;
            /**
                *階層の深さを返す
                *
                * @returns
                * @memberof TreeItem
                */
            getTreeLevel(): number;
            /**
                *親アイテムを取得
                *
                * @returns {TreeItem}
                * @memberof TreeItem
                */
            getParentItem(): TreeItem | null;
            /**
                *自分を含めた階層から値を参照してアイテムを探す
                *
                * @param {*} value
                * @returns {TreeItem}
                * @memberof TreeItem
                */
            findItemFromValue(value: unknown): TreeItem | null;
            /**
                *ツリーを展開する
                *
                * @param {boolean} opened
                * @param {boolean} [anime]
                * @memberof TreeItem
                */
            openItem(opened: boolean, anime?: boolean): void;
            /**
                *アイテムを選択する
                *
                * @memberof TreeItem
                */
            selectItem(scroll?: boolean, user?: boolean): void;
            /**
                *所属先のTreeViewを返す
                *
                * @returns {TreeView}
                * @memberof TreeItem
                */
            getTreeView(): TreeView | null;
    }
    /**
        *TreeView用クラス
        *
        * @export
        * @class TreeView
        * @extends {BaseView}
        */
    export class TreeView<T extends TreeViewEventMap = TreeViewEventMap> extends BaseView<T> {
            /**
                *Creates an instance of TreeView.
                * @memberof TreeView
                */
            constructor(params?: WINDOW_PARAMS);
            /**
                * 設定されている相対を条件にアイテムを検索
                *
                * @param {*} value
                * @returns {TreeItem}
                * @memberof TreeView
                */
            findItemFromValue(value: unknown): TreeItem | null;
            /**
                *最上位のアイテムを返す
                *
                * @returns {TreeItem}
                * @memberof TreeView
                */
            getRootItem(): TreeItem;
            /**
                *最上位の子としてアイテムを追加する
                *
                * @param {*} [label]
                * @param {boolean} [opened]
                * @returns {TreeItem}
                * @memberof TreeView
                */
            addItem(label?: string | [string, unknown], opened?: boolean): TreeItem;
            /**
                *アイテムを全て削除する
                *
                * @memberof TreeView
                */
            clearItem(): void;
            /**
                *アイテムを選択する
                *子アイテムが使用するので基本的には直接呼び出さない
                * @param {TreeItem} item 選択するアイテム
                * @memberof TreeView
                */
            selectItem(item: TreeItem, scroll?: boolean, user?: boolean): void;
            /**
                * 設定されている値を条件にアイテムを選択
                *
                * @param {*} value
                * @memberof TreeView
                */
            selectItemFromValue(value: unknown, scroll?: boolean, user?: boolean): void;
            /**
                *選択されているアイテムを返す
                *
                * @returns 選択されているアイテム
                * @memberof TreeView
                */
            getSelectItem(): TreeItem | null;
            /**
                *選択されているアイテムの値を返す
                *
                * @returns
                * @memberof TreeView
                */
            getSelectItemValue(): unknown;
            getTreeStat(): {
                    [key: string]: boolean;
            };
            setTreeStat(treeStat: {
                    [key: string]: boolean;
            }): void;
    }



    /**
        *位置設定用
        *
        * @export
        * @interface Point
        */
    export interface Point {
            x: number;
            y: number;
    }
    /**
        * サイズ設定用
        */
    export interface Size {
            width: number;
            height: number;
    }
    /**
        *カスタムイベント用
        *
        * @export
        * @interface JWFEvent
        * @extends {Event}
        */
    export interface JWFEvent extends Event {
            params: unknown;
    }
    /**
        * ドラッグドロップ機能用
        *
        * @export
        * @interface MovePoint
        * @param {Point} basePoint クリック基準位置
        * @param {Point} nowPoint 移動位置位置
        * @param {Point} nodePoint ノード初期位置
        * @param {Size} nodeSize ノード初期サイズ
        */
    export interface MovePoint {
            event: MouseEvent | TouchEvent;
            basePoint: Point;
            nowPoint: Point;
            nodePoint: Point;
            nodeSize: Size;
    }
    export class MoveElement extends HTMLDivElement {
            addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => unknown, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: (e: JWFEvent) => unknown): void;
    }
    /**
        *ウインドウノードにWindowの参照を持たせる
        *
        * @interface JNode
        * @extends {HTMLElement}
        */
    export interface JNode extends MoveElement {
            Jwf: BaseView;
    }
    /**
        *ウインドウ管理用基本データ
        *
        * @interface JDATA
        */
    export interface JDATA {
            x: number;
            y: number;
            width: number;
            height: number;
            frameSize: number;
            titleSize: number;
            redraw: boolean;
            parent: BaseView | null;
            orderTop: boolean;
            orderLayer: number;
            layoutFlag: boolean;
            clientArea: HTMLElement | null;
            style: string | null;
            visible: boolean;
            minimize: boolean;
            normalX: number;
            normalY: number;
            normalWidth: number;
            normalHeight: number;
            margin: {
                    x1: number;
                    y1: number;
                    x2: number;
                    y2: number;
            };
            padding: {
                    x1: number;
                    y1: number;
                    x2: number;
                    y2: number;
            };
            moveable: boolean;
            reshow: boolean;
            animation: {
                    [key: string]: string;
            };
            animationEnable: boolean;
            noActive: boolean;
            autoSizeNode: HTMLElement | null;
            instructionSize: {
                    width: number;
                    height: number;
            };
    }
    export interface WINDOW_EVENT_MAP {
            [key: string]: unknown[];
            active: [{
                    active: boolean;
            }];
            measure: [];
            closed: [];
            layout: [];
            layouted: [];
            visibled: [{
                    visible: boolean;
            }];
    }
    /**
        *ウインドウ作成用パラメータ
        * frame Frameを作成するか
        * title タイトルバーを表示するか
        * layer 重ね合わせ順序
        * overlap 領域をはみ出して表示するか
        * @export
        * @interface WINDOW_PARAMS
        */
    export interface WINDOW_PARAMS {
            frame?: boolean;
            title?: boolean;
            layer?: number;
            overlap?: boolean;
            visible?: boolean;
    }
    export interface WindowRemover {
            remove: () => void;
    }
    /**
        *ウインドウ基本クラス
        *
        * @export
        * @class Window
        */
    export class BaseView<T extends WINDOW_EVENT_MAP = WINDOW_EVENT_MAP> {
            /**
                * Creates an instance of Window.
                * @param {{ frame?: boolean, title?: boolean, layer?: number}} [params] ウインドウ作成用パラメータ
                * {	frame?:boolean,
                * 		title?:boolean,
                * 		layer?:number
                * }
                * @memberof Window
                */
            constructor(params?: WINDOW_PARAMS);
            setOverlap(flag: boolean): void;
            isOverlap(): boolean;
            setJwfStyle(style: string): void;
            getJwfStyle(): string | null;
            addRemover(...remover: WindowRemover[]): void;
            /**
                *イベントの受け取り
                *
                * @param {string} type イベントタイプ
                * @param {*} listener コールバックリスナー
                * @memberof Window
                */
            addEventListener<K extends keyof T>(name: K, proc: (...params: T[K]) => void): void;
            /**
                *イベントの削除
                *
                * @template K
                * @param {(K | string)} type イベントタイプ
                * @param {(this: BaseView, ev: WINDOW_EVENT_MAP[K]) => unknown} listener コールバックリスナー
                * @memberof Window
                */
            removeEventListener<K extends keyof T>(name: K & string, proc: (...params: T[K]) => void): void;
            /**
                *イベントの要求
                *
                * @param {string} type イベントタイプ
                * @param {*} params パラメータ
                * @memberof Window
                */
            callEvent<K extends keyof T>(name: K, ...params: T[K]): void;
            /**
                *ウインドウのノードを得る
                *
                * @returns {HTMLElement} ウインドウノード
                * @memberof Window
                */
            getNode(): JNode;
            /**
                *ウインドウの移動
                *
                * @param {number} x
                * @param {number} y
                * @memberof Window
                */
            movePos(x: number, y: number): void;
            setNoActive(flag: boolean): void;
            /**
                *ウインドウの位置設定
                *引数を省略した場合は親のサイズを考慮して中央へ
                * @param {number} [x]
                * @param {number} [y]
                * @memberof Window
                */
            setPos(x?: number, y?: number): void;
            getNearFrame(): FrameWindow | null;
            /**
                *X座標の設定
                *
                * @param {number} x
                * @memberof Window
                */
            setPosX(x: number): void;
            /**
                *Y座標の設定
                *
                * @param {number} y
                * @memberof Window
                */
            setPosY(y: number): void;
            /**
                *親ウインドウの取得
                *
                * @returns {BaseView} 親ウインドウ
                * @memberof Window
                */
            getParent(): BaseView | null;
            /**
                *クライアント領域のドラッグによる移動の許可
                *
                * @param {boolean} moveable true:許可 false:不許可
                * @memberof Window
                */
            setMoveable(moveable: boolean): void;
            /**
                *X座標を返す
                *
                * @returns {number}
                * @memberof Window
                */
            getPosX(): number;
            /**
                *Y座標を返す
                *
                * @returns {number}
                * @memberof Window
                */
            getPosY(): number;
            /**
                *ウインドウの幅を返す
                *
                * @returns
                * @memberof Window
                */
            getWidth(): number;
            /**
                *ウインドウの高さを返す
                *
                * @returns
                * @memberof Window
                */
            getHeight(): number;
            /**
                *ウインドウサイズの設定
                *
                * @param {number} width
                * @param {number} height
                * @memberof Window
                */
            setSize(width: number, height: number): void;
            /**
                *ウインドウの幅の設定
                *
                * @param {number} width
                * @memberof Window
                */
            setWidth(width: number): void;
            /**
                *ウインドウの高さの設定
                *
                * @param {number} height
                * @memberof Window
                */
            setHeight(height: number): void;
            /**
                * クライアント領域のpadding設定
                *
                * @param {number} x1
                * @param {number} y1
                * @param {number} x2
                * @param {number} y2
                * @memberof Window
                */
            setPadding(x1: number, y1: number, x2: number, y2: number): void;
            setPadding(all: number): void;
            /**
                *配置時のマージン設定
                *
                * @param {number} x1
                * @param {number} y1
                * @param {number} x2
                * @param {number} y2
                * @memberof Window
                */
            setMargin(x1: number, y1: number, x2: number, y2: number): void;
            setMargin(all: number): void;
            /**
                *ウインドウの可視状態の取得
                *
                * @returns {boolean}
                * @memberof Window
                */
            isVisible(): boolean;
            /**
                *ウインドウの可視状態の設定
                *
                * @param {boolean} flag
                * @memberof Window
                */
            setVisible(flag: boolean): void;
            /**
                *ウインドウの重ね合わせを最上位に設定
                *
                * @param {boolean} flag
                * @memberof Window
                */
            setOrderTop(flag: boolean): void;
            /**
                *ウインドウの重ね合わせ順位の設定
                *値が大きいほど上位
                * @param {number} level デフォルト:0 FrameWindow:10
                * @memberof Window
                */
            setOrderLayer(level: number): void;
            /**
                *レイアウトの再構成要求
                *
                * @memberof Window
                */
            layout(): void;
            /**
                *ウインドウをアクティブにする(重ね合わせ順序は変更しない)
                *
                * @param {boolean} [flag]
                * @memberof Window
                */
            active(flag?: boolean): void;
            /**
                *親のクライアント領域を返す
                *
                * @returns
                * @memberof Window
                */
            getParentWidth(): number;
            getParentWidth2(): number;
            /**
                *親のクライアント領域を返す
                *
                * @returns
                * @memberof Window
                */
            getParentHeight(): number;
            getParentHeight2(): number;
            /**
                *子ウインドウのサイズを再計算
                *
                * @param {boolean} flag true:強制再計算 false:必要があれば再計算
                * @returns {boolean} 再計算の必要を行ったかどうか
                * @memberof Window
                */
            onMeasure(flag: boolean): boolean;
            /**
                *位置やサイズの確定処理
                *非同期で必要なときに呼び出されるので、基本的には直接呼び出さないこと
                * @param {boolean} flag true:強制 false:必要なら
                * @memberof Window
                */
            onLayout(flag: boolean): void;
            /**
                *ウインドウの表示/非表示
                *
                * @param {boolean} flag true:表示 false:非表示
                * @memberof Window
                */
            show(flag: boolean): void;
            /**
                *ウインドウの重ね合わせ順位を上位に持って行く
                *
                * @param {boolean} [flag] ウインドウをアクティブにするかどうか
                * @memberof Window
                */
            foreground(flag?: boolean): void;
            /**
                *クライアント領域のスクロールの可否
                *
                * @param {boolean} flag
                * @memberof Window
                */
            setScroll(flag: boolean): void;
            /**
                *クライアント領域のスクロールが有効かどうか
                *
                * @returns {boolean}
                * @memberof Window
                */
            isScroll(): boolean;
            /**
                *ウインドウを閉じる
                *
                * @memberof Window
                */
            close(): void;
            /**
                *アニメーションの設定
                *
                * @param {string} name アニメーション名
                * @param {string} value アニメーションパラメータ
                * @memberof Window
                */
            setAnimation(name: string, value: string): void;
            /**
                *絶対位置の取得
                *
                * @returns
                * @memberof Window
                */
            getAbsX(): number;
            /**
                *絶対位置の取得
                *
                * @returns
                * @memberof Window
                */
            getAbsY(): number;
            /**
                *クライアントノードを返す
                * @returns {HTMLElement}
                * @memberof Window
                */
            getClient(): HTMLElement;
            /**
                *クライアント領域の基準位置を返す
                *
                * @returns
                * @memberof Window
                */
            getClientX(): number;
            /**
                *クライアント領域の基準位置を返す
                *
                * @returns
                * @memberof Window
                */
            getClientY(): number;
            /**
                *クライアントサイズを元にウインドウサイズを設定
                *
                * @param {number} width
                * @param {number} height
                * @memberof Window
                */
            setClientSize(width: number, height: number): void;
            /**
                *クライアントサイズを元にウインドウサイズを設定
                *
                * @param {number} width
                * @memberof Window
                */
            setClientWidth(width: number): void;
            /**
                *クライアントサイズを元にウインドウサイズを設定
                *
                * @param {number} height
                * @memberof Window
                */
            setClientHeight(height: number): void;
            /**
                *クライアントサイズを取得
                *
                * @returns {number}
                * @memberof Window
                */
            getClientWidth(): number;
            /**
                *クライアントサイズを取得
                *
                * @returns {number}
                * @memberof Window
                */
            getClientHeight(): number;
            /**
                *子ノードの追加
                *
                * @param {BaseView} child 子ウインドウ
                * @param {('left' | 'right' | 'top' | 'bottom' | 'client' | null)} [style] ドッキング位置
                * @memberof Window
                */
            addFrameChild(child: BaseView, style?: "left" | "right" | "top" | "bottom" | "client" | null): void;
            addChild(child: BaseView, style?: "left" | "right" | "top" | "bottom" | "client" | null): void;
            /**
                *ドッキングスタイルの設定
                *
                * @param {('left' | 'right' | 'top' | 'bottom' | 'client' | null)} style ドッキング位置
                * @memberof Window
                */
            setChildStyle(style: "left" | "right" | "top" | "bottom" | "client" | null): void;
            /**
                *子ウインドウを全て切り離す
                *
                * @memberof Window
                */
            removeChildAll(): void;
            /**
                *子ウインドウを切り離す
                *
                * @param {BaseView} child
                * @returns
                * @memberof Window
                */
            removeChild(child: BaseView): void;
            /**
                *自動サイズ調整の状態を取得
                *
                * @returns
                * @memberof Window
                */
            isAutoSize(): boolean;
            /**
                *自動サイズ調整を設定
                *
                * @param {boolean} scale
                * @memberof Window
                */
            setAutoSize(scale: boolean): void;
            /**
                *タイトル設定
                *
                * @param {string} title
                * @memberof Window
                */
            setTitle(title: string): void;
            /**
                *タイトル取得
                *
                * @returns {string}
                * @memberof Window
                */
            getTitle(): string;
            /**
                *ウインドウの最大化
                *
                * @param {boolean} flag
                * @memberof Window
                */
            setMaximize(flag: boolean): void;
            /**
                *ウインドウの最小化
                *
                * @param {boolean} flag
                * @memberof Window
                */
            setMinimize(flag: boolean): void;
    }



    /**
        * ウインドウ等総合管理クラス
        *
        * @export
        * @class Jwf
        */
    export class WindowManager {
            static nodeX: number;
            static nodeY: number;
            static baseX: number;
            static baseY: number;
            static nodeWidth: number;
            static nodeHeight: number;
            static moveNode: HTMLElement | null;
            static frame: number | null;
            /**
                * マウスとタッチイベントの座標取得処理
                * @param  {MouseEvent|TouchEvent} e
                * @returns {Point} マウスの座標
                */
            static getPos(e: MouseEvent | TouchEvent): Point;
            /**
                * 対象ノードに対して移動を許可し、イベントを発生させる
                *
                * @static
                * @param {HTMLElement} node
                * @memberof Jwf
                */
            static enableMove(node: HTMLElement): void;
            /**
                * ノードに対してイベントを発生させる
                *
                * @static
                * @param {HTMLElement} node 対象ノード
                * @param {string} ename イベント名
                * @param {*} [params] イベント発生時にevent.paramsの形で送られる
                * @memberof Jwf
                */
            static callEvent(node: HTMLElement, ename: string, params?: unknown): void;
            /**
                *ノードを作成する
                *
                * @static
                * @param {string} tagName タグ名
                * @param {*} [params] タグパラメータ
                * @returns {HTMLElement} 作成したノード
                * @memberof Jwf
                */
            static createElement<K extends keyof HTMLElementTagNameMap>(tagName: K, params?: object): HTMLElementTagNameMap[K];
            /**
                *ウインドウレイアウトの更新要求
                *実際の処理は遅延非同期で行われる
                *
                * @static
                * @param {boolean} flag	true:全Window強制更新 false:更新の必要があるWindowのみ更新
                * @memberof Jwf
                */
            static layout(flag: boolean): void;
    }


}
